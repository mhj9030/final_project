<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="community_group">
	<insert id="insertGroup" parameterType="com.final_project.community.Group">
		INSERT INTO group_info(groupNum, groupName, groupInfo, mid, saveFilename, originalFilename) 
		VALUES (group_info_seq.NEXTVAL, #{groupName}, #{groupInfo, jdbcType=VARCHAR}, #{mId},  
				#{saveFilename, jdbcType=VARCHAR}, #{originalFilename, jdbcType=VARCHAR})
	</insert>
	
	<insert id="insertTag" parameterType="map">
		INSERT INTO group_tag(groupNum, groupTag) VALUES (#{groupNum}, #{tag})
	</insert>
	
	<insert id="insertMember" parameterType="map">
		INSERT INTO group_member(groupNum, mId) VALUES (#{groupNum}, #{mId})
	</insert>
	
	
	<select id="createdLimit" parameterType="map" resultType="Integer">
		SELECT COUNT(mId) FROM group_info 
		WHERE mId = #{mId}
	</select>
	
	<select id="mylistGroup" parameterType="map" resultType="com.final_project.community.Group">
		SELECT gm.groupNum, groupName, saveFilename, originalFilename, gm.mId  
		FROM group_member gm JOIN group_info gi ON gm.groupNum=gi.groupNum
		WHERE gm.mId = #{mId} 
		ORDER BY gm.groupNum DESC
	</select>
	
	<select id="readMaxnum" resultType="Integer">
		select max(groupNum) from group_info
	</select>
	
	<sql id="where-list">
	  <if test="searchKey=='groupName'">
	      INSTR(groupName, #{searchValue}) &gt; 0
	  </if>
	</sql>
	
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0) FROM group_info p JOIN member m ON p.mId = m.mId 
	    <where>
	     	<if test="searchValue!=null and searchValue!='' ">
	     	    <include refid="where-list"/>
	     	</if>
	    </where>  
	</select>
	
	<select id="dataTagCount" parameterType="map" resultType="Integer">
		select Count(groupTag) FROM group_tag 
		<where>
			groupTag=#{searchValue} 
		</where>
	</select>
	
	<select id="listGroup" parameterType="map" resultType="com.final_project.community.Group">
		SELECT * FROM( 
			SELECT ROWNUM rnum, tb.* FROM(
				SELECT gi.groupNum, groupName, saveFilename, originalFilename, gi.mId  
				FROM group_info gi JOIN member m ON gi.mId=m.mId 
				<where>
			     	<if test="searchValue!=null and searchValue!='' ">
			     	    <include refid="where-list"/>
			     	</if>
	    		</where>
	    		ORDER BY groupNum DESC
	<![CDATA[
           ) tb WHERE ROWNUM <= #{end}
       ) WHERE rnum >= #{start}
    ]]> 
	</select>
	
	<select id="tagListGroup" parameterType="map" resultType="com.final_project.community.Group">
		SELECT * FROM( 
			SELECT ROWNUM rnum, tb.* FROM(
				SELECT i.groupName, i.groupNum, i.saveFilename, i.originalFilename, i.mId from GROUP_TAG t
				left outer join
				(
					SELECT groupName, groupNum, saveFilename, originalFilename, mId   
					from GROUP_INFO
				)i ON t.groupNum = i.groupNum
				<where>
			     	t.groupTag=#{searchValue} 
				</where>
				ORDER BY t.groupNum DESC
		<![CDATA[
           ) tb WHERE ROWNUM <= #{end}
       ) WHERE rnum >= #{start}
    ]]>
	</select>
	
	<select id="listTag" parameterType="Integer" resultType="com.final_project.community.GroupTag">
		SELECT groupTag FROM group_tag WHERE groupNum = #{groupNum}
	</select>
	
	<select id="menuTag" resultType="com.final_project.community.GroupTag">
		SELECT ROWNUM rnum, tb.* FROM(
			SELECT COUNT(groupTag) AS cnt , groupTag FROM group_Tag
			Group by groupTag
			HAVING COUNT(groupTag) > 1
			ORDER BY COUNT(groupTag) DESC
		 <![CDATA[ 
		 )tb WHERE ROWNUM <= 10 
		 ]]> 
	</select>
	
	<select id="groupNameCheck" parameterType="map" resultType="Integer">
		select count(groupName) FROM group_info WHERE groupName=#{groupName}
	</select>
	
	<select id="readGroup" parameterType="map" resultType="com.final_project.community.Group">
		SELECT  groupName, groupNum, groupInfo,mName, TO_CHAR(created, 'YYYY-MM-DD') created, saveFilename, originalFilename 
		FROM group_info gi JOIN member m ON gi.mId = m.mId
		WHERE groupNum = #{groupNum}  
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	<update id="updatehitCount" parameterType="Integer">
		UPDATE photo_bbs SET hitCount = hitCount + 1 WHERE ptnum = #{ptnum}
	</update>
	
	<select id="readPhoto" parameterType="Integer" resultType="com.final_project.community.Photo">
		SELECT p.ptnum, subject, content, created, hitCount, p.mId, mName, saveFilename, originalFilename 
		FROM photo_bbs p JOIN member m ON p.mId=m.mId 
		WHERE ptnum = #{ptnum}	
	</select>
	
	<select id="preReadPhoto" parameterType="map" resultType="com.final_project.community.Photo">
		SELECT tb.* FROM(
			SELECT ptnum, subject 
			FROM photo_bbs p JOIN member m ON p.mId=m.mId 
			<where>
			     	<if test="searchValue!=null and searchValue!='' ">
			     	    <include refid="where-list"/>
			     	</if>
	     			<![CDATA[
		                 AND (ptnum > #{ptnum}) AND state = 0
		            ]]>
	    	</where>
	    	ORDER BY ptnum ASC
	    ) tb WHERE ROWNUM=1
	</select>
	
	<select id="nextReadPhoto" parameterType="map" resultType="com.final_project.community.Photo">
		SELECT tb.* FROM(
			SELECT ptnum, subject 
			FROM photo_bbs p JOIN member m ON p.mId=m.mId 
			<where>
			     	<if test="searchValue!=null and searchValue!='' ">
			     	    <include refid="where-list"/>
			     	</if>
	     			<![CDATA[
		                 AND (ptnum < #{ptnum}) AND state = 0
		            ]]>
	    	</where>
	    	ORDER BY ptnum DESC
	    ) tb WHERE ROWNUM=1
	</select>
	
	<update id="deletePhoto" parameterType="Integer">
		UPDATE Photo_bbs SET state = 1 WHERE ptnum=#{ptnum}
	</update>
	
	<update id="updatePhoto" parameterType="com.final_project.community.Photo">
		UPDATE photo_bbs SET subject=#{subject}, content=#{content}, 
							saveFilename=#{saveFilename, jdbcType=VARCHAR}, 
							originalFilename=#{originalFilename, jdbcType=VARCHAR} 
							WHERE ptnum = #{ptnum}
	</update>
	
	<insert id="insertLikePhoto" parameterType="com.final_project.community.Photo">
	INSERT INTO photo_like(ptnum, mId) VALUES (#{ptnum}, #{mId})
	</insert>

	<select id="countLikePhoto" resultType="Integer" parameterType="Integer">
	   SELECT  NVL(COUNT(*), 0) countLikePhoto
	        FROM photo_like WHERE ptnum=#{ptnum}
	</select>
	
	<insert id="insertReply" parameterType="com.final_project.community.PhotoReply">
		INSERT INTO photo_re(replyNum, ptnum, mId, content, answer) 
		VALUES (PHOTO_RE_SEQ.NEXTVAL, #{ptnum}, #{mId}, #{content}, #{answer})
	</insert>
	
	<select id="replyDataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) replyCount FROM photo_re 
		WHERE ptnum = #{ptnum} AND answer = 0 
	</select>
	
	<select id="listReply" parameterType="map" resultType="com.final_project.community.PhotoReply">
		SELECT * FROM (
			SELECT ROWNUM rnum, tb.* FROM(
				SELECT tbreply.replyNum, ptnum, mId, mName, content, created, 
						tbreply.answer, NVL(answerCount, 0) answerCount 
				FROM
				(
					(
						SELECT replyNum, r.ptnum, r.mId, mName, r.content, r.created, answer  
						FROM photo_re r JOIN member m ON r.mId=m.mId 
						WHERE ptnum = #{ptnum} AND answer = 0
					) tbreply
					LEFT OUTER JOIN
					(
						SELECT answer, COUNT(*) answerCount 
						FROM photo_re 
						GROUP BY answer 
					) tbanswer ON tbreply.replyNum=tbanswer.answer
				) 
				ORDER BY replyNum DESC
	<![CDATA[
			)tb WHERE ROWNUM <= #{end}
		) WHERE rnum >= #{start}
	]]>			
	</select>
	
	<delete id="deleteReply" parameterType="map">
		DELETE FROM photo_re WHERE
	    <if test="mode == 'ptnum' ">
			 ptnum=#{ptnum}
		</if>
	    <if test="mode == 'reply' ">
			 replyNum IN 
               (SELECT replyNum FROM photo_re START WITH  replyNum = #{replyNum}
	            CONNECT BY PRIOR replyNum = answer)
		</if>
	    <if test="mode == 'answer' ">
			 replyNum=#{replyNum}
		</if>
	</delete>

    <!-- 댓글별 답글 리스트 -->
	<select id="listReplyAnswer" resultType="com.final_project.community.PhotoReply" parameterType="Integer">
     SELECT replyNum, ptnum, r.mId, mName, content, created, answer
	          FROM photo_re r 
	          JOIN member m ON r.mId=m.mId
              WHERE answer=#{answer}
              ORDER BY replyNum DESC
	</select>
	
    <!-- 댓글별 답글 개수 -->
	<select id="replyCountAnswer" resultType="Integer" parameterType="Integer">
	   SELECT NVL(COUNT(*), 0)
	        FROM photo_re WHERE answer=#{answer}
	</select>
	
</mapper>