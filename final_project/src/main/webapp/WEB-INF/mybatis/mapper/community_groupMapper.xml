<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="community_group">
	<insert id="insertGroup" parameterType="com.final_project.community.Group">
		INSERT INTO group_info(groupNum, groupName, groupInfo, mid, saveFilename, originalFilename) 
		VALUES (#{groupNum}, #{groupName}, #{groupInfo, jdbcType=VARCHAR}, #{mId},  
				#{saveFilename, jdbcType=VARCHAR}, #{originalFilename, jdbcType=VARCHAR})
	</insert>
	
	<select id="maxGroupSeq" resultType="Integer">
	    SELECT NVL(MAX(groupNum), 0) FROM group_info
	</select>
	
	<insert id="insertTag" parameterType="map">
		INSERT INTO group_tag(groupNum, groupTag) VALUES (#{groupNum}, #{tag})
	</insert>
	
	<insert id="insertMember" parameterType="map">
		INSERT INTO group_member(groupNum, mId) VALUES (#{groupNum}, #{mId})
	</insert>
	
	
	<select id="createdLimit" parameterType="map" resultType="Integer">
		SELECT COUNT(mId) FROM group_info 
		WHERE mId = #{mId}
	</select>
	
	<select id="mylistGroup" parameterType="map" resultType="com.final_project.community.Group">
		SELECT gm.groupNum, groupName, saveFilename, originalFilename, gm.mId  
		FROM group_member gm JOIN group_info gi ON gm.groupNum=gi.groupNum
		WHERE gm.mId = #{mId} 
		ORDER BY gm.groupNum DESC
	</select>
	
	<select id="readMaxnum" resultType="Integer">
		select max(groupNum) from group_info
	</select>
	
	<sql id="where-list">
	  <if test="searchKey=='groupName'">
	      INSTR(groupName, #{searchValue}) &gt; 0
	  </if>
	</sql>
	
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0) FROM group_info p JOIN member m ON p.mId = m.mId 
	    <where>
	     	<if test="searchValue!=null and searchValue!='' ">
	     	    <include refid="where-list"/>
	     	</if>
	    </where>  
	</select>
	
	<select id="checkGroupMember" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0) FROM group_member WHERE groupNum=#{groupNum} AND mId=#{mId} 
	</select>
	
	<select id="dataTagCount" parameterType="map" resultType="Integer">
		select Count(groupTag) FROM group_tag 
		<where>
			groupTag=#{searchValue} 
		</where>
	</select>
	
	<select id="listGroup" parameterType="map" resultType="com.final_project.community.Group">
		SELECT * FROM( 
			SELECT ROWNUM rnum, tb.* FROM(
				SELECT gi.groupNum, groupName, saveFilename, originalFilename, gi.mId  
				FROM group_info gi JOIN member m ON gi.mId=m.mId 
				<where>
			     	<if test="searchValue!=null and searchValue!='' ">
			     	    <include refid="where-list"/>
			     	</if>
	    		</where>
	    		ORDER BY groupNum DESC
	<![CDATA[
           ) tb WHERE ROWNUM <= #{end}
       ) WHERE rnum >= #{start}
    ]]> 
	</select>
	
	<select id="listPopularity" parameterType="map" resultType="com.final_project.community.Group">
		SELECT * FROM( 
			SELECT ROWNUM rnum, tb.* FROM(
				SELECT gi.groupNum, groupName, saveFilename, originalFilename, gi.mId, memberCount  
				FROM group_info gi JOIN member m ON gi.mId=m.mId
				LEFT OUTER JOIN
			    (
			    	SELECT groupNum, COUNT(*) memberCount FROM group_member 
			        GROUP BY groupNum
			    )gm ON gi.groupNum = gm.groupNum 
				<where>
			     	<if test="searchValue!=null and searchValue!='' ">
			     	    <include refid="where-list"/>
			     	</if>
	    		</where>
	    		ORDER BY memberCount DESC
	<![CDATA[
           ) tb WHERE ROWNUM <= #{end}
       ) WHERE rnum >= #{start}
    ]]> 
	</select>
	
	<select id="tagListGroup" parameterType="map" resultType="com.final_project.community.Group">
		SELECT * FROM( 
			SELECT ROWNUM rnum, tb.* FROM(
				SELECT i.groupName, i.groupNum, i.saveFilename, i.originalFilename, i.mId from GROUP_TAG t
				left outer join
				(
					SELECT groupName, groupNum, saveFilename, originalFilename, mId   
					from GROUP_INFO
				)i ON t.groupNum = i.groupNum
				<where>
			     	t.groupTag=#{searchValue} 
				</where>
				ORDER BY t.groupNum DESC
		<![CDATA[
           ) tb WHERE ROWNUM <= #{end}
       ) WHERE rnum >= #{start}
    ]]>
	</select>
	
	<select id="listTag" parameterType="Integer" resultType="com.final_project.community.GroupTag">
		SELECT groupTag FROM group_tag WHERE groupNum = #{groupNum}
	</select>
	
	<select id="menuTag" resultType="com.final_project.community.GroupTag">
		SELECT ROWNUM rnum, tb.* FROM(
			SELECT COUNT(groupTag) AS cnt , groupTag FROM group_Tag
			Group by groupTag
			HAVING COUNT(groupTag) > 1
			ORDER BY COUNT(groupTag) DESC
		 <![CDATA[ 
		 )tb WHERE ROWNUM <= 10 
		 ]]> 
	</select>
	
	<select id="groupNameCheck" parameterType="map" resultType="Integer">
		select count(groupName) FROM group_info WHERE groupName=#{groupName}
	</select>
	
	<select id="readGroup" parameterType="map" resultType="com.final_project.community.Group">
		SELECT  gi.mId, groupName, groupNum, groupInfo,mName, TO_CHAR(created, 'YYYY-MM-DD') created, saveFilename, originalFilename 
		FROM group_info gi JOIN member m ON gi.mId = m.mId
		WHERE groupNum = #{groupNum}  
	</select>
	
	<update id="updateGroup" parameterType="com.final_project.community.Group">
		UPDATE group_info SET  groupInfo=#{groupInfo}, 
							saveFilename=#{saveFilename, jdbcType=VARCHAR}, 
							originalFilename=#{originalFilename, jdbcType=VARCHAR} 
							WHERE groupNum = #{groupNum}
	</update>
	
	<delete id="deleteGroup" parameterType="Integer">
		DELETE FROM group_info WHERE groupNum = #{groupNum}
	</delete>
	
	
	<!-- 블로그 게시판 -->
	<update id="createBoardTable" parameterType="Integer">
		CREATE TABLE g_${value}_board (
  		  gbnum         NUMBER NOT NULL
  		  ,groupNum      NUMBER NOT NULL
  		  ,mId          VARCHAR2(200) NOT NULL
  		  ,subject     VARCHAR2(255) NOT NULL
  		  ,content     CLOB NOT NULL
  		  ,hitCount    NUMBER  DEFAULT 0
  		  ,originalFilename  VARCHAR2(2000)
  		  ,saveFilename      VARCHAR2(2000)
  		  ,created     DATE DEFAULT SYSDATE
  		  ,PRIMARY   KEY(gbnum)
 		  ,FOREIGN    KEY(groupNum) REFERENCES group_info(groupNum)
                     ON DELETE CASCADE
          ,FOREIGN    KEY(mId) REFERENCES member(mId)
                     ON DELETE CASCADE
       )
	</update>

	<update id="dropBoardTable" parameterType="Integer">
	    DROP TABLE g_${value}_board PURGE
	</update>

	<!-- 블로그 게시판 공감 -->
	<update id="createBoardLikeTable" parameterType="Integer">
	CREATE TABLE g_${value}_boardLike (
  	  gbnum       NUMBER NOT NULL
  	  ,mId   VARCHAR2(200) NOT NULL
  	  ,PRIMARY  KEY(gbnum, mId)
  	  ,FOREIGN  KEY(gbnum) REFERENCES g_${value}_board(gbnum)
	      ON DELETE CASCADE
 	   ,FOREIGN  KEY(mId) REFERENCES member(mId)
	      ON DELETE CASCADE
	)
	</update>
	
	<update id="dropBoardLikeTable" parameterType="Integer">
	    DROP TABLE g_${value}_boardLike PURGE
	</update>

	
	<!-- 블로그 게시판 리플 -->
	<update id="createBoardReplyTable" parameterType="Integer">
	CREATE TABLE g_${value}_boardReply (
 	   replyNum  NUMBER NOT NULL
  	   ,gbnum      NUMBER NOT NULL
  	   ,mId   VARCHAR2(200) NOT NULL
  	   ,content  VARCHAR2(4000) NOT NULL
   	   ,created  DATE DEFAULT SYSDATE
  	   ,answer   NUMBER NOT NULL
 	   ,PRIMARY  KEY(replyNum)
   	   ,FOREIGN  KEY(gbnum) REFERENCES g_${value}_board(gbnum)
	         ON DELETE CASCADE
   	   ,FOREIGN  KEY(mId) REFERENCES member(mId)
	         ON DELETE CASCADE
	)
	</update>
	<update id="dropBoardReplyTable" parameterType="Integer">
	    DROP TABLE g_${value}_boardReply PURGE
	</update>
	
	
	
	<select id="maxGroupBoardSeq" parameterType="map" resultType="Integer">
	    SELECT NVL(MAX(gbnum), 0) FROM g_${groupNum}_BOARD
	</select>
	
	<insert id="insertGroupBoard" parameterType="com.final_project.community.GroupBoard">
		INSERT INTO g_${groupNum}_BOARD(gbNum, groupNum, subject, content, mId, saveFilename, originalFilename) 
		VALUES (#{gbNum}, #{groupNum}, #{subject}, #{content}, #{mId},  
				#{saveFilename, jdbcType=VARCHAR}, #{originalFilename, jdbcType=VARCHAR})
	</insert>
	
	
	
	
	<sql id="board-where-list">
	  <if test="searchKey=='mName'">
	      mName=#{searchValue}
	  </if>
	  <if test="searchKey=='subject'">
	       INSTR(subject, #{searchValue}) &gt; 0
	  </if>
	  <if test="searchKey=='content'">
	      DBMS_LOB.INSTR(content, #{searchValue}) &gt; 0 
	  </if>
	  <if test="searchKey=='created'">
	      TO_CHAR(b.created, 'YYYY-MM-DD') = #{searchValue}
          OR TO_CHAR(b.created, 'YYYYMMDD') = #{searchValue}
	  </if>
	</sql>
	
	<select id="dataCountBoard" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0) FROM g_${groupNum}_board b JOIN member m ON b.mId=m.mId
	    <where>
	     	<if test="searchValue!=null and searchValue!='' ">
	     	    <include refid="board-where-list"/>
	     	</if>
	    </where> 
	</select>
	
	<select id="listGroupBoard" parameterType="map" resultType="com.final_project.community.GroupBoard">
		SELECT * FROM( 
			SELECT ROWNUM rnum, tb.* FROM(
				SELECT b.gbNum, m.mId, mName, subject, TO_CHAR(b.created, 'YYYY-MM-DD') created, b.groupNum, 
					   hitCount, saveFilename, NVL(replyCount, 0) replyCount, NVL(likeCount, 0) likeCount  
				FROM g_${groupNum}_board b JOIN member m ON b.mId=m.mId 
				LEFT OUTER JOIN
				(
					SELECT gbNum, COUNT(*) replyCount FROM g_${groupNum}_boardreply 
					WHERE answer=0 
					GROUP BY gbNum
				) r ON b.gbNum=r.gbNum 
				LEFT OUTER JOIN
				(
					SELECT gbNum, COUNT(*) likeCount FROM g_${groupNum}_boardlike
					GROUP BY gbNum
				) l ON b.gbNum=l.gbNum
				<where>
			     	<if test="searchValue!=null and searchValue!='' ">
			     	    <include refid="board-where-list"/>
			     	</if>
	    		</where>
	    		ORDER BY gbNum DESC
	<![CDATA[
           ) tb WHERE ROWNUM <= #{end}
       ) WHERE rnum >= #{start}
    ]]> 
	</select>
	
	<select id="readGroupBoard" parameterType="map" resultType="com.final_project.community.GroupBoard">
		SELECT b.gbNum, b.groupNum,subject, content, created, hitCount, b.mId, mName, saveFilename, originalFilename 
		FROM  g_${groupNum}_board b JOIN member m ON b.mId=m.mId 
		WHERE gbNum = #{gbNum}
	</select>
	
	<update id="updatehitCount" parameterType="map">
		UPDATE g_${groupNum}_board SET hitCount = hitCount + 1 WHERE gbNum = #{gbNum}
	</update>
	
	<select id="preReadGroupBoard" parameterType="map" resultType="com.final_project.community.GroupBoard">
		SELECT tb.* FROM(
			SELECT gbNum, subject 
			FROM g_${groupNum}_board b JOIN member m ON b.mId=m.mId 
			<where>
			     	<if test="searchValue!=null and searchValue!='' ">
			     	    <include refid="board-where-list"/>
			     	</if>
	     			<![CDATA[
		                 AND (gbNum > #{gbNum}) 
		            ]]>
	    	</where>
	    	ORDER BY gbNum ASC
	    ) tb WHERE ROWNUM=1
	</select>
	
	<select id="nextReadGroupBoard" parameterType="map" resultType="com.final_project.community.GroupBoard">
		SELECT tb.* FROM(
			SELECT gbNum, subject 
			FROM g_${groupNum}_board b JOIN member m ON b.mId=m.mId 
			<where>
			     	<if test="searchValue!=null and searchValue!='' ">
			     	    <include refid="board-where-list"/>
			     	</if>
	     			<![CDATA[
		                 AND (gbNum < #{gbNum})
		            ]]>
	    	</where>
	    	ORDER BY gbNum DESC
	    ) tb WHERE ROWNUM=1
	</select>
	
	<delete id="deleteGroupBoard" parameterType="map">
		DELETE FROM g_${groupNum}_board  WHERE gbNum=#{gbNum} 
	</delete>
	
	<update id="updateGroupBoard" parameterType="com.final_project.community.GroupBoard">
		UPDATE g_${groupNum}_board SET subject=#{subject}, content=#{content}, 
							saveFilename=#{saveFilename, jdbcType=VARCHAR}, 
							originalFilename=#{originalFilename, jdbcType=VARCHAR} 
							WHERE gbNum = #{gbNum}
	</update>
	
	
	<select id="maxGroupBoardReplyNum" parameterType="com.final_project.community.GroupBoardReply" resultType="Integer">
	    SELECT NVL(MAX(replyNum), 0) FROM g_${groupNum}_BOARDREPLY
	</select>
	
	<insert id="insertLikeGroupBoard" parameterType="com.final_project.community.GroupBoard">
	INSERT INTO g_${groupNum}_boardlike(gbNum, mId) VALUES (#{gbNum}, #{mId})
	</insert>

	<select id="countLikeGroupBoard" resultType="Integer" parameterType="map">
	   SELECT  NVL(COUNT(*), 0) countLikeGroupBoard
	        FROM g_${groupNum}_boardlike WHERE gbNum=#{gbNum}
	</select>
	
	<insert id="insertReply" parameterType="com.final_project.community.GroupBoardReply">
		INSERT INTO g_${groupNum}_boardreply(replyNum, gbNum, mId, content, answer) 
		VALUES (#{replyNum}, #{gbNum}, #{mId}, #{content}, #{answer})
	</insert>
	
	<select id="replyDataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) replyCount FROM g_${groupNum}_boardreply 
		WHERE gbNum = #{gbNum} AND answer = 0 
	</select>
	
	<select id="listReply" parameterType="map" resultType="com.final_project.community.GroupBoardReply">
		SELECT * FROM (
			SELECT ROWNUM rnum, tb.* FROM(
				SELECT tbreply.replyNum, gbNum, mId, mName, content, created, 
						tbreply.answer, NVL(answerCount, 0) answerCount 
				FROM
				(
					(
						SELECT replyNum, r.gbNum, r.mId, mName, r.content, r.created, answer  
						FROM g_${groupNum}_boardreply r JOIN member m ON r.mId=m.mId 
						WHERE gbNum = #{gbNum} AND answer = 0
					) tbreply
					LEFT OUTER JOIN
					(
						SELECT answer, COUNT(*) answerCount 
						FROM g_${groupNum}_boardreply 
						GROUP BY answer 
					) tbanswer ON tbreply.replyNum=tbanswer.answer
				) 
				ORDER BY replyNum DESC
	<![CDATA[
			)tb WHERE ROWNUM <= #{end}
		) WHERE rnum >= #{start}
	]]>			
	</select>
	
	<delete id="deleteReply" parameterType="map">
		DELETE FROM g_${groupNum}_boardreply WHERE
	    <if test="mode == 'gbNum' ">
			 gbNum=#{gbNum}
		</if>
	    <if test="mode == 'reply' ">
			 replyNum IN 
               (SELECT replyNum FROM g_${groupNum}_boardreply START WITH  replyNum = #{replyNum}
	            CONNECT BY PRIOR replyNum = answer)
		</if>
	    <if test="mode == 'answer' ">
			 replyNum=#{replyNum}
		</if>
	</delete>

    <!-- 댓글별 답글 리스트 -->
	<select id="listReplyAnswer" resultType="com.final_project.community.GroupBoardReply" parameterType="map">
     SELECT replyNum, gbNum, r.mId, mName, content, created, answer
	          FROM g_${groupNum}_boardreply r 
	          JOIN member m ON r.mId=m.mId
              WHERE answer=#{answer}
              ORDER BY replyNum DESC
	</select>
	
    <!-- 댓글별 답글 개수 -->
	<select id="replyCountAnswer" resultType="Integer" parameterType="map">
	   SELECT NVL(COUNT(*), 0)
	        FROM g_${groupNum}_boardreply WHERE answer=#{answer}
	</select>
	
	<insert id="joinGroup" parameterType="map">
		INSERT INTO group_member(groupNum, mId) VALUES (#{groupNum}, #{mId}) 
	</insert>
	
	<delete id="outGroup" parameterType="map">
		DELETE FROM group_member WHERE mId=#{mId} AND groupNum=#{groupNum}
	</delete>
	
	<select id="listMainGroup" resultType="com.final_project.community.Group">
		SELECT ROWNUM, tb.* FROM(
			select saveFilename, originalFilename, groupName, gi.groupNum, gm.memberCount
			FROM group_info gi
			LEFT OUTER JOIN
			(
			  SELECT groupNum, COUNT(*) memberCount FROM group_member
			  GROUP BY groupNum
			) gm ON gi.groupNum=gm.groupNum
			ORDER BY memberCount DESC
		<![CDATA[
			)tb WHERE ROWNUM<=3
		]]>
	</select>
	
	<select id="listGroupMember" parameterType="map" resultType="com.final_project.community.GroupMember">
		select prophoto, gm.mId, mName 
		FROM group_member gm 
		JOIN profile p ON gm.mId = p.mId 
      	JOIN member m ON gm.mId = m.mId 
     	WHERE groupNum = #{groupNum}
	</select>
</mapper>