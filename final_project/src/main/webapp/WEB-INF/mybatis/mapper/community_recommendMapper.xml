<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="community_recommend">
	<insert id="insertRecommend" parameterType="com.final_project.community.Recommend">
		INSERT INTO jobtip_board(jtnum, subject, content, mid, saveFilename, originalFilename, type) 
		VALUES (JOBTIP_BOARD_SEQ.NEXTVAL, #{subject}, #{content}, #{mId},  
				#{saveFilename, jdbcType=VARCHAR}, #{originalFilename, jdbcType=VARCHAR}, #{type})
	</insert>
	
	<sql id="where-list">
		<if test="searchValue!=null and searchValue!=''">
			INSTR(cName, #{searchValue})&gt;=1
		</if>
	</sql>
	
	
	<select id="dataCount_company" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0) FROM company 
	    <where>
	     	<include refid="where-list"/>
	     	<![CDATA[
	     		AND cNum>0
	     	]]>	
	    </where>  
	</select>
	
	<select id="dataCount_goodcom_total" resultType="Integer">
		SELECT NVL(COUNT(*),0) FROM goodcom_bbs 
	</select>
	
	<select id="dataCount_goodcom" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*),0) FROM goodcom_bbs 
		WHERE cNum = #{cNum}
	</select>
	
	
	<select id="listRecommend" parameterType="map" resultType="com.final_project.community.Recommend">
		SELECT * FROM( 
			SELECT ROWNUM rnum, tb.* FROM(
				SELECT c.cNum, cName, ci.cLogoImage, TO_CHAR(ccreated, 'YYYY-MM-DD') ccreated, NVL(gcCount, 0) gcCount, NVL(grade, 0) grade, NVL(employCount, 0) employCount 
		        	from company c
		          	join com_image ci on c.cSerial=ci.cSerial
                LEFT OUTER JOIN
                (
                  select cNum, count(*) gcCount, round(avg(grade),1) grade  FROM goodcom_bbs g
                  GROUP BY cNum
                ) gc ON c.cNum=gc.cNum
                LEFT OUTER JOIN
                (
                  SELECT cSerial,  COUNT(*) employCount FROM com_employ
                  GROUP BY cSerial
                ) ce ON c.cSerial=ce.cSerial
				<where>
					<include refid="where-list"/>
	    			<![CDATA[
	     				AND c.cNum>0
	     			]]>	 
	    		</where>
	    		ORDER BY cNum DESC
	<![CDATA[
           ) tb WHERE ROWNUM <= #{end}
       ) WHERE rnum >= #{start}
    ]]> 
	</select>
	<select id="listRecommendArticle" parameterType="map" resultType="com.final_project.community.RecommendArticle">
		SELECT * FROM( 
			SELECT ROWNUM rnum, tb.* FROM(
				SELECT g.gcNum, c.cName, subject, content, grade, created, g.mId, mName 
		        from goodcom_bbs g
		        join member m on g.mId = m.mId
		        join company c on g.cNum=c.cNum 
				WHERE g.cNum = #{cNum} AND state = 0 
	    		ORDER BY gcNum DESC
	<![CDATA[
           ) tb WHERE ROWNUM <= #{end}
       ) WHERE rnum >= #{start}
    ]]> 
	</select>
	
	<select id="RecommendArticleInfo" parameterType="map" resultType="com.final_project.community.RecommendArticle">
		SELECT DISTINCT cp.cName, NVL(gradeAvg, 0) gradeAvg , 
				NVL(grade1,0) grade1, NVL(grade2,0) grade2,
				NVL(grade3,0) grade3, NVL(grade4,0) grade4, NVL(grade5,0) grade5 
		FROM goodcom_bbs g JOIN company c ON g.cNum = c.cNum
		RIGHT OUTER JOIN
		(
			SELECT cNum, cName FROM company 
			WHERE cNum = #{cNum}
		)cp ON g.cNum = cp.cNum 
		LEFT OUTER JOIN
        (
        	SELECT cNum, round(avg(grade),1) gradeAvg FROM goodcom_bbs 
			WHERE cNum = #{cNum} 
			GROUP BY cNUM
        ) ga ON g.cNum=ga.cNum
        LEFT OUTER JOIN
        (
        	SELECT cNum, NVL(COUNT(grade),0) grade1 FROM goodcom_bbs 
			WHERE cNum=#{cNum} AND grade = 1
			GROUP BY cNUM
        )g1 ON g.cNum = g1.cNum
        LEFT OUTER JOIN
        (
        	SELECT cNum, NVL(COUNT(grade),0) grade2 FROM goodcom_bbs 
			WHERE cNum=#{cNum} AND grade = 2
			GROUP BY cNUM
        )g2 ON g.cNum = g2.cNum
        LEFT OUTER JOIN
        (
        	SELECT cNum, NVL(COUNT(grade),0) grade3 FROM goodcom_bbs 
			WHERE cNum=#{cNum} AND grade =3
			GROUP BY cNUM
        )g3 ON g.cNum = g3.cNum
        LEFT OUTER JOIN
        (
        	SELECT cNum, NVL(COUNT(grade),0) grade4 FROM goodcom_bbs 
			WHERE cNum=#{cNum} AND grade = 4
			GROUP BY cNUM
        )g4 ON g.cNum = g4.cNum
        LEFT OUTER JOIN
        (
        	SELECT cNum, NVL(COUNT(grade),0) grade5 FROM goodcom_bbs 
			WHERE cNum=#{cNum} AND grade = 5
			GROUP BY cNUM
        )g5 ON g.cNum = g5.cNum
	</select>
	
	
	<select id="dataCountEmploy" parameterType="Integer" resultType="Integer">
		SELECT NVL(employCount,0) employCount FROM company c 
		LEFT OUTER JOIN
        (
        	SELECT cSerial,  COUNT(*) employCount FROM com_employ
       		GROUP BY cSerial
        ) ce ON c.cSerial=ce.cSerial
        WHERE cNUM = #{cNum}
	</select>
	
	<select id="readRecommendContent" parameterType="Integer" resultType="com.final_project.community.RecommendArticle">
		SELECT g.content, m.mName, g.gcNum FROM goodcom_bbs g JOIN member m ON g.mId = m.mId 
		WHERE gcNum = #{gcNum} 
	</select>
	
	
	
	
	
	
	<!-- <update id="updatehitCount" parameterType="Integer">
		UPDATE jobtip_board SET hitCount = hitCount + 1 WHERE jtnum = #{jtnum}
	</update>
	
	<select id="readTip" parameterType="Integer" resultType="com.final_project.community.Tip">
		SELECT t.jtnum, subject, content, created, hitCount, t.mId, mName, saveFilename, originalFilename, type 
		FROM jobtip_board t JOIN member m ON t.mId=m.mId 
		WHERE jtnum = #{jtnum}	
	</select>
	
	<select id="preReadTip" parameterType="map" resultType="com.final_project.community.Tip">
		SELECT tb.* FROM(
			SELECT jtnum, subject 
			FROM jobtip_board t JOIN member m ON t.mId=m.mId 
			<where>
	     			<![CDATA[
		                 (jtnum > #{jtnum}) AND state = 0
		            ]]>
		            <include refid="where-list"/>
	    	</where>
	    	ORDER BY jtnum ASC
	    ) tb WHERE ROWNUM=1
	</select>
	
	<select id="nextReadTip" parameterType="map" resultType="com.final_project.community.Tip">
		SELECT tb.* FROM(
			SELECT jtnum, subject 
			FROM jobtip_board t JOIN member m ON t.mId=m.mId 
			<where>
	     			<![CDATA[
		                 (jtnum < #{jtnum}) AND state = 0
		            ]]>
		            <include refid="where-list"/>
	    	</where>
	    	ORDER BY jtnum DESC
	    ) tb WHERE ROWNUM=1
	</select>
	
	<update id="deleteTip" parameterType="Integer">
		UPDATE jobtip_board SET state = 1 WHERE jtnum=#{jtnum}
	</update>
	
	<update id="updateTip" parameterType="com.final_project.community.Tip">
		UPDATE jobtip_board SET subject=#{subject}, content=#{content}, type=#{type}, 
							saveFilename=#{saveFilename, jdbcType=VARCHAR}, 
							originalFilename=#{originalFilename, jdbcType=VARCHAR} 
							WHERE jtnum = #{jtnum}
	</update>
	
	<insert id="insertLikeTip" parameterType="com.final_project.community.Tip">
	INSERT INTO jobtip_like(jtnum, mId) VALUES (#{jtnum}, #{mId})
	</insert>

	<select id="countLikeTip" resultType="Integer" parameterType="Integer">
	   SELECT  NVL(COUNT(*), 0) countLikeTip
	        FROM jobtip_like WHERE jtnum=#{jtnum}
	</select>
	
	<insert id="insertReply" parameterType="com.final_project.community.TipReply">
		INSERT INTO jobtip_re(replyNum, jtnum, mId, content, answer) 
		VALUES (JOBTIP_RE_SEQ.NEXTVAL, #{jtnum}, #{mId}, #{content}, #{answer})
	</insert>
	
	<select id="replyDataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0) replyCount FROM jobtip_re 
		WHERE jtnum = #{jtnum} AND answer = 0 
	</select>
	
	<select id="listReply" parameterType="map" resultType="com.final_project.community.TipReply">
		SELECT * FROM (
			SELECT ROWNUM rnum, tb.* FROM(
				SELECT tbreply.replyNum, jtnum, mId, mName, content, created, 
						tbreply.answer, NVL(answerCount, 0) answerCount 
				FROM
				(
					(
						SELECT replyNum, r.jtnum, r.mId, mName, r.content, r.created, answer  
						FROM jobtip_re r JOIN member m ON r.mId=m.mId 
						WHERE jtnum = #{jtnum} AND answer = 0
					) tbreply
					LEFT OUTER JOIN
					(
						SELECT answer, COUNT(*) answerCount 
						FROM jobtip_re 
						GROUP BY answer 
					) tbanswer ON tbreply.replyNum=tbanswer.answer
				) 
				ORDER BY replyNum DESC
	<![CDATA[
			)tb WHERE ROWNUM <= #{end}
		) WHERE rnum >= #{start}
	]]>			
	</select>
	
	<delete id="deleteReply" parameterType="map">
		DELETE FROM jobtip_re WHERE
	    <if test="mode == 'jtnum' ">
			 jtnum=#{jtnum}
		</if>
	    <if test="mode == 'reply' ">
			 replyNum IN 
               (SELECT replyNum FROM jobtip_re START WITH  replyNum = #{replyNum}
	            CONNECT BY PRIOR replyNum = answer)
		</if>
	    <if test="mode == 'answer' ">
			 replyNum=#{replyNum}
		</if>
	</delete>

    댓글별 답글 리스트
	<select id="listReplyAnswer" resultType="com.final_project.community.TipReply" parameterType="Integer">
     SELECT replyNum, jtnum, r.mId, mName, content, created, answer
	          FROM jobtip_re r 
	          JOIN member m ON r.mId=m.mId
              WHERE answer=#{answer}
              ORDER BY replyNum DESC
	</select>
	
    댓글별 답글 개수
	<select id="replyCountAnswer" resultType="Integer" parameterType="Integer">
	   SELECT NVL(COUNT(*), 0)
	        FROM jobtip_re WHERE answer=#{answer}
	</select> -->
		
</mapper>